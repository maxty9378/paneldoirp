// –¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö QR –∫–æ–¥–æ–≤
const SUPABASE_URL = 'https://oaockmesooydvausfoca.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9hb2NrbWVzb295ZHZhdXNmb2NhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEzNzI4NDEsImV4cCI6MjA2Njk0ODg0MX0.gwWS35APlyST7_IUvQvJtGO4QmGsvbE95lnQf0H1PUE';

async function testExistingQR() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ QR –∫–æ–¥—ã...');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö QR —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ QR —Ç–æ–∫–µ–Ω–æ–≤...');
    const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2');
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    
    const { data: tokens, error: tokensError } = await supabase
      .from('user_qr_tokens')
      .select('token, user_id, created_at, is_active')
      .eq('is_active', true)
      .limit(5);
    
    if (tokensError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', tokensError);
      return;
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:', tokens.length);
    tokens.forEach((token, i) => {
      console.log(`${i + 1}. –¢–æ–∫–µ–Ω: ${token.token.substring(0, 8)}... (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${token.user_id})`);
    });
    
    if (tokens.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö QR —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–∑–µ!');
      return;
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–µ—Ä–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
    const testToken = tokens[0].token;
    console.log(`\nüîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ç–æ–∫–µ–Ω–æ–º: ${testToken.substring(0, 8)}...`);
    
    const authResponse = await fetch(`${SUPABASE_URL}/functions/v1/auth-by-qr-token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
      },
      body: JSON.stringify({ token: testToken })
    });

    const authData = await authResponse.json();
    console.log('üîë Auth response status:', authResponse.status);
    console.log('üîë Auth response data:', authData);

    if (!authResponse.ok || !authData.success) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authData.error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ auth.users
      console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ auth.users...');
      const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
      
      if (usersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
      } else {
        const user = users.users.find(u => u.id === tokens[0].user_id);
        if (user) {
          console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.email);
        } else {
          console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ auth.users!');
        }
      }
    } else {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      console.log('üîó Redirect URL:', authData.redirectUrl);
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testExistingQR();

