import React from 'react';
import { CheckCircle, Star } from 'lucide-react';

interface EvaluationSuccessModalProps {
  isOpen: boolean;
  onClose: () => void;
  participantName: string;
  caseNumber?: number | null;
  totalScore: number;
  evaluationType?: string;
  detailedScores?: Record<string, number>; // –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
  onRemoveEvaluation?: () => Promise<void>;
}

export const EvaluationSuccessModal: React.FC<EvaluationSuccessModalProps> = ({
  isOpen,
  onClose,
  participantName,
  caseNumber,
  totalScore,
  evaluationType = '–†–µ—à–µ–Ω–∏–µ –∫–µ–π—Å–∞',
  detailedScores = {},
  onRemoveEvaluation
}) => {
  if (!isOpen) return null;

  console.log('üéâ EvaluationSuccessModal received totalScore:', totalScore);

  const getScoreColor = (score: number) => {
    if (score >= 4) return 'text-green-600';
    if (score >= 3) return 'text-yellow-600';
    return 'text-red-600';
  };


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
  const getCriteriaNames = () => {
    if (evaluationType === '–†–µ—à–µ–Ω–∏–µ –∫–µ–π—Å–∞') {
      return {
        correctness: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è –∫–µ–π—Å–∞',
        clarity: '–ß—ë—Ç–∫–æ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ä–µ—à–µ–Ω–∏—è',
        independence: '–°—Ç–µ–ø–µ–Ω—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏ –∫–µ–π—Å–∞'
      };
    } else if (evaluationType === '–ó–∞—â–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞') {
      return {
        goal_achievement: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏',
        topic_development: '–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ç–µ–º—ã',
        presentation_quality: '–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏'
      };
    } else if (evaluationType === '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞') {
      return {
        results_orientation: '–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è ¬´–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç¬ª',
        effective_communication: '–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è ¬´–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è¬ª',
        teamwork_skills: '–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è ¬´–£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ¬ª',
        systemic_thinking: '–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è ¬´–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ¬ª'
      };
    }
    return {};
  };

  const criteriaNames = getCriteriaNames();
  const hasDetailedScores = Object.keys(detailedScores).length > 0;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10003] p-4">
      <div className="bg-white rounded-2xl shadow-xl max-w-md w-full p-4 sm:p-6">
        {/* –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞ */}
        <div className="flex justify-center mb-4 sm:mb-6">
          <div className="w-16 h-16 sm:w-20 sm:h-20 bg-green-100 rounded-full flex items-center justify-center">
            <CheckCircle className="w-10 h-10 sm:w-12 sm:h-12 text-green-600" />
          </div>
        </div>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-4 sm:mb-6">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-900 mb-2">
            –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
          </h2>
          <p className="text-sm sm:text-base text-gray-600">
            {caseNumber 
              ? `–†–µ—à–µ–Ω–∏–µ –∫–µ–π—Å–∞ #${caseNumber} –æ—Ç` 
              : `${evaluationType} –æ—Ç`
            } <span className="font-semibold">{participantName}</span>
          </p>
        </div>

        {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ */}
        {hasDetailedScores && (
          <div className="mb-4 sm:mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-3 text-center">–û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º</h3>
            <div className="space-y-2">
              {Object.entries(detailedScores).map(([key, score]) => (
                <div key={key} className="flex items-center justify-between bg-gray-50 rounded-lg p-3">
                  <span className="text-sm text-gray-700 flex-1">
                    {criteriaNames[key as keyof typeof criteriaNames] || key}
                  </span>
                  <div className="flex items-center gap-2">
                    <span className={`text-lg font-semibold ${getScoreColor(score)}`}>
                      {score % 1 === 0 ? score.toFixed(0) : score.toFixed(1)}
                    </span>
                    <span className="text-sm text-gray-500">/ 5</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ - –º–µ–Ω–µ–µ –∞–∫—Ü–µ–Ω—Ç–Ω–∞—è */}
        <div className="bg-gray-50 rounded-xl p-3 sm:p-4 mb-4 sm:mb-6">
          <div className="text-center">
            <div className="flex items-center justify-center gap-2 mb-1">
              <Star className="w-4 h-4 text-gray-500" />
              <span className="text-sm text-gray-600">–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞</span>
            </div>
            <div className={`text-xl sm:text-2xl font-semibold ${getScoreColor(totalScore)}`}>
              {totalScore % 1 === 0 ? totalScore.toFixed(0) : totalScore.toFixed(1)}
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ */}
        <button
          onClick={onClose}
          className="w-full px-4 py-3 bg-emerald-600 text-white rounded-xl hover:bg-emerald-700 transition-colors font-semibold text-base touch-manipulation"
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        </button>
      </div>
    </div>
  );
};
