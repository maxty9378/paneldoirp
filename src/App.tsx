import { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, useNavigate, useLocation, useParams } from 'react-router-dom';
import { AuthProvider, useAuth } from './hooks/useAuth';
import { supabase } from './lib/supabase';
import { Layout } from './components/Layout';
import { LoginPage } from './components/LoginPage/LoginPage';
import { hasCachedUsers } from './lib/userCache';
import { CreateEventModal } from './components/events/CreateEventModal';
// –ò–º–ø–æ—Ä—Ç CreateEventPage —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ—É—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–æ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ –æ–Ω –Ω–µ —é–∑–∞–µ—Ç—Å—è)
import CreateEventPage from './pages/CreateEventPage';
import { DashboardView } from './components/DashboardView';
import { AdminView } from './components/AdminView';
import { EventsView } from './components/EventsView';
import EmployeesView from './components/EmployeesView';
import EventDetailView from './components/EventDetailView';
import { CalendarView } from './components/CalendarView';
import { RepresentativesView } from './components/RepresentativesView';
import { SupervisorsView } from './components/SupervisorsView';
import { ExpertEventsView } from './components/ExpertEventsView';
import { TasksView } from './components/TasksView'; 
import { TestingView } from './components/admin/TestingView';
import { TrainerTerritoriesView } from './components/TrainerTerritoriesView';
import { TestUsersView } from './components/TestUsersView';
import { ExamReservePage, ExamDetailsPage, ExpertExamPage } from './components/exam';
import CaseEvaluationPage from './components/exam/CaseEvaluationPage';
import ExpertSchedulePage from './components/exam/ExpertSchedulePage';
import ExpertRouteGuard from './components/ExpertRouteGuard';
import MobileLayout from './components/layout/MobileLayout';
import { RefreshCw, OctagonAlert as AlertOctagon } from 'lucide-react';
import TakeTestPage from './pages/TakeTestPage';
import TestResultsPage from './pages/TestResultsPage';
import EventTestResultsPage from './pages/EventTestResultsPage';
import EventTestReviewPage from './pages/EventTestReviewPage';
import EventTPEvaluation from './pages/EventTPEvaluation';
import AuthCallback from './pages/AuthCallback';
import QRAuthPage from './pages/QRAuthPage';
import { LoadingOverlay } from './components/LoadingOverlay';
import { Spinner } from './components/ui/Spinner';

function EventDetailPage({ onStartTest }: { onStartTest: (testId: string, eventId: string, attemptId: string) => void }) {
  const { eventId } = useParams();
  const navigate = useNavigate();
  
  if (!eventId) return <div>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</div>;
  
  const handleBack = () => {
    navigate('/events');
  };
  
  return <EventDetailView eventId={eventId} onStartTest={onStartTest} onBack={handleBack} />;
}

function AppContent() {
  const { 
    user, 
    userProfile,
    loading, 
    resetAuth, 
    authError, 
    loadingPhase,
    retryFetchProfile
  } = useAuth();
  const [showEventModal, setShowEventModal] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
  const [showQuickLoginOnLogout, setShowQuickLoginOnLogout] = useState(false);
  const navigate = useNavigate();

  // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–≤–µ—Ä–ª–µ—è - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è
  const isAuthFlow = typeof window !== 'undefined' && window.location.pathname.startsWith('/auth/');
  const isExpertQR = typeof window !== 'undefined' && window.location.pathname.startsWith('/auth/qr');
  const showOverlay =
    isAuthFlow ||
    (loadingPhase === 'initializing') ||
    (loadingPhase === 'session-fetch') ||
    (loadingPhase === 'auth-change');

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ –ø—Ä–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  useEffect(() => {
    if (!user && !loading && hasCachedUsers() && !isAuthFlow) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª, —á—Ç–æ –æ–Ω —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª—Å—è
      const timer = setTimeout(() => {
        setShowQuickLoginOnLogout(true);
      }, 1000);
      
      return () => clearTimeout(timer);
    } else {
      setShowQuickLoginOnLogout(false);
    }
  }, [user, loading, isAuthFlow]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ callback
  useEffect(() => {
    console.log('üîÑ App: Checking auth params');
    const { hash, search, pathname } = window.location;
    console.log('üîÑ App: Current URL:', window.location.href);
    console.log('üîÑ App: Pathname:', pathname);
    console.log('üîÑ App: Search:', search);
    console.log('üîÑ App: Hash:', hash);

    const hasPKCE = search.includes('code=');
    const hasHashTokens = hash.includes('access_token') || hash.includes('refresh_token') || hash.includes('token=');
    const hasSearchMagic = search.includes('token=') && search.includes('type=magiclink');
    const hasIPhoneAuth = search.includes('auth=success') && search.includes('user=') && search.includes('token=');

    console.log('üîÑ App: hasPKCE:', hasPKCE);
    console.log('üîÑ App: hasHashTokens:', hasHashTokens);
    console.log('üîÑ App: hasSearchMagic:', hasSearchMagic);
    console.log('üîÑ App: hasIPhoneAuth:', hasIPhoneAuth);

    // –ï—Å–ª–∏ –º—ã —É–∂–µ –Ω–∞ /auth/callback, –Ω–µ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
    if (pathname === '/auth/callback') {
      console.log('‚ÑπÔ∏è Already on /auth/callback, skipping redirect');
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å auth –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º URL
    if (user && (hasPKCE || hasHashTokens || hasSearchMagic || hasIPhoneAuth)) {
      console.log('‚úÖ App: User already authenticated, cleaning URL without redirect');
      const cleanUrl = window.location.origin + window.location.pathname;
      window.history.replaceState({}, '', cleanUrl);
      return;
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ iPhone –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (hasIPhoneAuth) {
      console.log('üçé iPhone auth detected, redirecting to callback...');
      const urlParams = new URLSearchParams(search);
      const userId = urlParams.get('user');
      const qrToken = urlParams.get('token');
      
      if (userId && qrToken) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ callback —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è iPhone
        console.log('üçé iPhone: Redirecting to callback with mock tokens');
        const mockCallbackUrl = `/auth/callback?token=iphone_${qrToken}&type=magiclink&redirect_to=http://51.250.94.103/`;
        window.location.replace(mockCallbackUrl);
        return;
      }
      
      // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—á–∏—â–∞–µ–º URL –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
      console.log('üçé iPhone: Clearing URL and showing login form');
      window.history.replaceState({}, '', '/');
      return;
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å auth –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –º—ã –Ω–µ –Ω–∞ callback, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
    if ((hasPKCE || hasHashTokens || hasSearchMagic) && pathname !== '/auth/callback') {
      const suffix = hasPKCE ? search : hash || search;
      console.log('üîÑ Auth params detected, redirecting to /auth/callback...');
      console.log('üîÑ App: Redirecting to:', '/auth/callback' + suffix);
      window.location.replace('/auth/callback' + suffix);
    } else {
      console.log('‚ÑπÔ∏è No magic link tokens found');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    const checkStoredSession = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        if (session && !error) {
          console.log('‚úÖ Found stored session:', session.user.email);
        } else {
          console.log('‚ÑπÔ∏è No stored session found');
        }
      } catch (error) {
        console.error('‚ùå Error checking stored session:', error);
      }
    };

    checkStoredSession();
  }, [user]); // –î–æ–±–∞–≤–ª—è–µ–º user –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  
  const [editingEvent, setEditingEvent] = useState<any>(null); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (null –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)
  const [loadingSeconds, setLoadingSeconds] = useState(0);
  const location = useLocation();
  const isAuthCallback = location.pathname === '/auth/callback';

  // ‚ö†Ô∏è –ù–∏–∫–∞–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏/–ª–æ–≥–∏–Ω–∞ –¥–ª—è AuthCallback ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞—ë–º –∫–æ–ª–ª–±–µ–∫
  if (isAuthCallback) {
    return <AuthCallback />;
  }

  // ‚ö†Ô∏è –†–∞–∑—Ä–µ—à–∞–µ–º QR –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ loading/user
  const isQRAuth = location.pathname.startsWith('/auth/qr/');
  if (isQRAuth) {
    return (
      <Routes>
        <Route path="/auth/qr/:token" element={<QRAuthPage />} />
      </Routes>
    );
  }

  // –î–ª—è Layout: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π view –ø–æ location.pathname
  const getCurrentView = () => {
    if (location.pathname.startsWith('/take-test')) return 'take-test';
    if (location.pathname.startsWith('/test-results/')) return 'take-test';
    if (location.pathname.startsWith('/events')) return 'events';
    if (location.pathname.startsWith('/event/')) return 'event-detail';
    if (location.pathname.startsWith('/calendar')) return 'calendar';
    if (location.pathname.startsWith('/representatives')) return 'representatives';
    if (location.pathname.startsWith('/supervisors')) return 'supervisors';
    if (location.pathname.startsWith('/expert-events')) return 'expert-events';
    if (location.pathname.startsWith('/tasks')) return 'tasks';
    if (location.pathname.startsWith('/testing')) return 'tests';
    if (location.pathname.startsWith('/admin')) return 'admin';
    if (location.pathname.startsWith('/employees')) return 'employees';
    if (location.pathname.startsWith('/test-users')) return 'test-users';
    if (location.pathname.startsWith('/exam-management')) return 'exam-reserve';
    if (location.pathname.startsWith('/exam-reserve')) return 'exam-reserve';
    if (location.pathname.startsWith('/expert-schedule')) return 'schedule';
    return 'dashboard';
  };
  const currentView = getCurrentView();

  // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
  const handleStartTest = (testId: string, eventId: string, attemptId?: string) => {
    console.log('üöÄ App handleStartTest –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { testId, eventId, attemptId });
    
    const params = new URLSearchParams({
      eventId: eventId,
      testId: testId
    });
    if (attemptId) {
      params.append('attemptId', attemptId);
    }
    
    const url = `/take-test?${params.toString()}`;
    console.log('üß≠ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞:', url);
    navigate(url);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É
  const handleEditEvent = async (eventId: string) => {
    console.log('handleEditEvent –≤—ã–∑–≤–∞–Ω–∞ —Å eventId:', eventId);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const { data: event, error } = await supabase
        .from('events')
        .select(`
          *,
          event_types (*),
          creator:creator_id(
            id,
            full_name,
            email,
            avatar_url
          ),
          event_participants (
            user_id,
            users (
              id,
              full_name,
              email,
              sap_number
            )
          )
        `)
        .eq('id', eventId)
        .single();

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
        return;
      }

      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', event);
      setEditingEvent(event); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setShowEventModal(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è (null –¥–ª—è editingEvent –∑–Ω–∞—á–∏—Ç ‚Äî –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ)
  const handleCreateEvent = () => {
    setEditingEvent(null); // –°–±—Ä–æ—Å –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    setShowEventModal(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
  };

  // Track loading time
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (loading) {
      timer = setInterval(() => {
        setLoadingSeconds(prev => prev + 1);
      }, 1000);
    } else {
      setLoadingSeconds(0);
    }
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [loading]);

  if (loading) {
    return (
      <div className="min-h-screen relative overflow-hidden flex items-center justify-center p-4">
        {/* –§–æ–Ω –≤ —Å—Ç–∏–ª–µ Apple 2025 */}
        <div className="absolute inset-0">
          <div className="absolute inset-0 bg-gradient-to-br from-slate-50 via-white to-blue-50" />
          <div className="absolute top-0 left-0 w-full h-full">
            <div className="absolute top-[-20%] right-[-10%] w-[600px] h-[600px] rounded-full bg-gradient-to-br from-blue-400/20 via-cyan-300/20 to-teal-400/20 blur-3xl animate-pulse" style={{ animationDuration: '8s' }} />
            <div className="absolute bottom-[-20%] left-[-10%] w-[700px] h-[700px] rounded-full bg-gradient-to-tr from-emerald-300/20 via-green-400/20 to-lime-300/20 blur-3xl animate-pulse" style={{ animationDuration: '10s', animationDelay: '2s' }} />
          </div>
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.8),transparent_50%)]" />
        </div>

        <div className="relative z-10 bg-white/80 backdrop-blur-2xl rounded-3xl p-8 shadow-2xl border border-white/50 max-w-md mx-auto">
          <div className="text-center">
            <Spinner size={48} className="mx-auto mb-6" label="–ó–∞–≥—Ä—É–∂–∞–µ–º" />

            <h2 className="text-2xl font-semibold text-gray-900 mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>
            <p className="text-gray-600 mb-4">
              {loadingPhase === 'initializing' && '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...'}
              {loadingPhase === 'session-fetch' && '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏...'}
              {loadingPhase === 'profile-fetch' && '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...'}
              {loadingPhase === 'auth-change' && '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...'}
              {!['initializing', 'session-fetch', 'profile-fetch', 'auth-change'].includes(loadingPhase) && '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...'}
            </p>

            {loadingSeconds > 3 && (
              <p className="text-sm text-gray-500 mb-4">
                –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {loadingSeconds} —Å–µ–∫.
              </p>
            )}

            {authError && (
              <div className="bg-red-50 border border-red-200 rounded-xl p-4 mb-4 text-left">
                <div className="flex items-start">
                  <AlertOctagon className="h-5 w-5 text-red-500 mr-2 mt-0.5 flex-shrink-0" />
                  <div>
                    <p className="text-red-800 font-medium text-sm">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>
                    <p className="text-red-700 text-sm mt-1">{authError}</p>
                  </div>
                </div>
              </div>
            )}

            {loadingSeconds > 5 && (
              <div className="flex flex-col sm:flex-row gap-3 justify-center">
                {authError && retryFetchProfile && (
                  <button
                    onClick={retryFetchProfile}
                    className="inline-flex items-center justify-center px-4 py-2 bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transition-all duration-200"
                  >
                    <RefreshCw className="h-4 w-4 mr-2" />
                    –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                  </button>
                )}
                <button
                  onClick={resetAuth}
                  className="inline-flex items-center justify-center px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white font-medium rounded-xl shadow-lg hover:shadow-xl transition-all duration-200"
                >
                  üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∏ —Å–±—Ä–æ—Å–∏—Ç—å
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  }
  
  if (!user) {
    // –ü–æ–∫–∞ –∏–¥—ë—Ç auth-—Ñ–ª–æ—É –∏–ª–∏ —Ä–∞–Ω–Ω—è—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî —Ñ–æ—Ä–º—É –≤–æ–æ–±—â–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
    if (isAuthFlow || loadingPhase === 'initializing' || loadingPhase === 'session-fetch' || loadingPhase === 'auth-change') {
      return null; // –æ–≤–µ—Ä–ª–µ–π —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
    }
    return <LoginPage />;
  }

  // –§–∏–∫—Å —Ä–æ—É—Ç–∞ /events: –ø–µ—Ä–µ–¥–∞–µ–º onCreateEvent –∫–∞–∫ handleCreateEvent (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –≤–º–µ—Å—Ç–æ navigate)
  // onEditEvent –æ—Å—Ç–∞–µ—Ç—Å—è handleEditEvent, onNavigateToEvent ‚Äî –∫–∞–∫ –±—ã–ª–æ
  return (
    <>
      <LoadingOverlay
        visible={showOverlay}
        title={isExpertQR ? '–í—Ö–æ–¥ —ç–∫—Å–ø–µ—Ä—Ç–∞' : '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Ö–æ–¥‚Ä¶'}
        subtitle={isExpertQR ? '–°–≤–µ—Ä—è–µ–º QR-—Ç–æ–∫–µ–Ω –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø—ã' : '–ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è'}
      />
      <Layout currentView={currentView}>
        <Routes>
          <Route path="/" element={<DashboardView />} />
          {/* –†–æ—É—Ç /events: —Ç–µ–ø–µ—Ä—å onCreateEvent –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É, –∞ –Ω–µ –ø–µ–π–¥–∂ */}
          <Route 
            path="/events" 
            element={
              <EventsView 
                onNavigateToEvent={id => {
                  // –î–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–µ–¥—É—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —ç–∫—Å–ø–µ—Ä—Ç–∞
                  if (userProfile?.role === 'expert') {
                    navigate('/expert-exam/36520f72-c191-4e32-ba02-aa17c482c50b');
                  } else {
                    // –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –≤–µ–¥–µ–º –Ω–∞ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤ —Ä–µ–∑–µ—Ä–≤–∞ —Ç–∞–ª–∞–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ EventCard
                    navigate(`/event/${id}`);
                  }
                }} 
                onEditEvent={id => handleEditEvent(id)} 
                onCreateEvent={handleCreateEvent} // <- –§–∏–∫—Å: —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
              />} 
          />
          {/* –£–±—Ä–∞–ª–∏ —Ä–æ—É—Ç /create-event –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª–∫—É (—Ñ–∏–∫—Å #15) */}
          <Route path="/event/:eventId" element={<EventDetailPage onStartTest={handleStartTest} />} />
          <Route path="/calendar" element={<CalendarView />} />
          <Route path="/representatives" element={<RepresentativesView />} />
          <Route path="/supervisors" element={<SupervisorsView />} />
          <Route path="/expert-events" element={<ExpertEventsView />} />
          <Route path="/tasks" element={<TasksView />} />
          <Route path="/testing" element={<TestingView />} />
          <Route path="/trainer-territories" element={<TrainerTerritoriesView />} />
          <Route path="/admin" element={<AdminView />} />
          <Route path="/employees" element={<EmployeesView />} />
          <Route path="/test-users" element={<TestUsersView />} />
          <Route path="/exam-reserve" element={<ExamReservePage />} />
          <Route path="/exam-details/:id" element={<ExamDetailsPage />} />
          <Route path="/expert-schedule" element={<ExpertSchedulePage />} />
          
          {/* –†–æ—É—Ç—ã —Å –º–æ–±–∏–ª—å–Ω—ã–º –º–µ–Ω—é */}
          <Route element={<MobileLayout />}>
            <Route path="/expert-exam/:id" element={
              <ExpertRouteGuard>
                <ExpertExamPage />
              </ExpertRouteGuard>
            } />
            <Route path="/expert-exam/:id/schedule" element={
              <ExpertRouteGuard>
                <ExpertExamPage />
              </ExpertRouteGuard>
            } />
            <Route path="/expert-exam/:id/evaluations" element={
              <ExpertRouteGuard>
                <ExpertExamPage />
              </ExpertRouteGuard>
            } />
            <Route path="/case-evaluation/:examId" element={
              <ExpertRouteGuard>
                <CaseEvaluationPage />
              </ExpertRouteGuard>
            } />
          </Route>
          <Route path="/take-test" element={<TakeTestPage />} />
          <Route path="/test-results/:attemptId" element={<TestResultsPage />} />
          <Route path="/event-test-results/:eventId" element={<EventTestResultsPage />} />
          <Route path="/event-test-review/:eventId" element={<EventTestReviewPage />} />
          <Route path="/event-tp-evaluation/:eventId" element={<EventTPEvaluation />} />
          <Route path="/auth/qr/:token" element={<QRAuthPage />} />
        </Routes>
        
        {/* –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ‚Äî —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± (—Ñ–∏–∫—Å #15) */}
        <CreateEventModal
          isOpen={showEventModal}
          onClose={() => {
            setShowEventModal(false);
            setEditingEvent(null); // –°–±—Ä–æ—Å editingEvent –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
          }}
          onSuccess={() => {
            setShowEventModal(false);
            setEditingEvent(null); // –°–±—Ä–æ—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
            navigate('/events'); // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
          }}
          editingEvent={editingEvent} // null –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        />
        
        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ –ø—Ä–∏ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–Ω–∏–∏ */}
        {showQuickLoginOnLogout && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center space-x-2">
                    <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                      <span className="text-blue-600 text-sm font-bold">üëã</span>
                    </div>
                    <h3 className="text-lg font-semibold">–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥</h3>
                  </div>
                  <button
                    onClick={() => setShowQuickLoginOnLogout(false)}
                    className="text-gray-400 hover:text-gray-600 text-xl font-bold"
                  >
                    √ó
                  </button>
                </div>
                
                <div className="text-center mb-6">
                  <p className="text-gray-600 mb-4">
                    –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞?
                  </p>
                  <p className="text-sm text-gray-500">
                    –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ
                  </p>
                </div>
                
                <div className="space-y-3">
                  <button
                    onClick={() => {
                      setShowQuickLoginOnLogout(false);
                      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ –∏–∑ LoginForm
                      const quickLoginBtn = document.querySelector('[data-quick-login]') as HTMLButtonElement;
                      if (quickLoginBtn) {
                        quickLoginBtn.click();
                      }
                    }}
                    className="w-full flex items-center justify-center px-4 py-3 bg-[#06A478] text-white rounded-lg hover:bg-[#059669] transition-colors shadow-sm hover:shadow-md"
                  >
                    <span className="mr-2">‚ö°</span>
                    –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
                  </button>

                  <button
                    onClick={() => setShowQuickLoginOnLogout(false)}
                    className="w-full px-4 py-3 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
                  >
                    –í–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </Layout>
    </>
  );
}

function App() {
  return (
    <AuthProvider>
      <Router>
        <AppContent />
      </Router>
    </AuthProvider>
  );
}

export default App;