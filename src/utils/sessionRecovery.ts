/**
 * –ú–µ—Ö–∞–Ω–∏–∑–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–∞–∫ –≤ Google
 */

import { supabase } from '../lib/supabase';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ localStorage
export async function checkStoredSession(): Promise<boolean> {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå Error checking stored session:', error);
      return false;
    }
    
    if (session?.user) {
      console.log('‚úÖ Stored session found:', session.user.email);
      return true;
    }
    
    console.log('‚ÑπÔ∏è No stored session found');
    return false;
  } catch (error) {
    console.error('‚ùå Exception checking stored session:', error);
    return false;
  }
}

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏–∑ localStorage
export async function restoreSession(): Promise<boolean> {
  try {
    console.log('üîÑ Attempting to restore session from localStorage...');
    
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå Error restoring session:', error);
      return false;
    }
    
    if (session?.user) {
      console.log('‚úÖ Session restored successfully:', session.user.email);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
      const expiresAt = session.expires_at;
      if (expiresAt) {
        const now = Math.floor(Date.now() / 1000);
        const timeUntilExpiry = expiresAt - now;
        
        console.log(`‚è∞ Session expires in ${Math.floor(timeUntilExpiry / 60)} minutes`);
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if (timeUntilExpiry < 10 * 60) {
          console.log('üîÑ Token expiring soon, refreshing...');
          const { data: refreshData, error: refreshError } = await supabase.auth.refreshSession();
          
          if (refreshError) {
            console.error('‚ùå Error refreshing session:', refreshError);
            return false;
          }
          
          if (refreshData.session) {
            console.log('‚úÖ Session refreshed successfully');
            return true;
          }
        }
      }
      
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Exception restoring session:', error);
    return false;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export async function initializeSessionRecovery(): Promise<void> {
  console.log('üîê Initializing session recovery...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
  const hasStoredSession = await checkStoredSession();
  
  if (hasStoredSession) {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    await restoreSession();
  } else {
    console.log('‚ÑπÔ∏è No stored session to restore');
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ
export function saveLastLoginInfo(email: string): void {
  try {
    const loginInfo = {
      email,
      timestamp: Date.now(),
    };
    
    localStorage.setItem('sns-last-login', JSON.stringify(loginInfo));
    console.log('üíæ Last login info saved:', email);
  } catch (error) {
    console.error('‚ùå Error saving last login info:', error);
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ
export function getLastLoginInfo(): { email: string; timestamp: number } | null {
  try {
    const loginInfoStr = localStorage.getItem('sns-last-login');
    if (!loginInfoStr) return null;
    
    return JSON.parse(loginInfoStr);
  } catch (error) {
    console.error('‚ùå Error getting last login info:', error);
    return null;
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ö–æ–¥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export function saveLogoutInfo(email: string): void {
  try {
    const logoutInfo = {
      email,
      timestamp: Date.now(),
    };
    
    localStorage.setItem('sns-last-logout', JSON.stringify(logoutInfo));
    console.log('üíæ Logout info saved:', email);
  } catch (error) {
    console.error('‚ùå Error saving logout info:', error);
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—ã—Ö–æ–¥–µ
export function getLastLogoutInfo(): { email: string; timestamp: number } | null {
  try {
    const logoutInfoStr = localStorage.getItem('sns-last-logout');
    if (!logoutInfoStr) return null;
    
    return JSON.parse(logoutInfoStr);
  } catch (error) {
    console.error('‚ùå Error getting last logout info:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ
export function shouldShowLastLoginInfo(): boolean {
  const logoutInfo = getLastLogoutInfo();
  if (!logoutInfo) return false;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã—Ö–æ–¥ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
  const now = Date.now();
  const diffMs = now - logoutInfo.timestamp;
  const diffMins = Math.floor(diffMs / 60000);
  
  return diffMins < 5;
}

