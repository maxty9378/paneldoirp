import { useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../lib/supabase';

// –†–∞—Å—à–∏—Ä—è–µ–º window –¥–ª—è —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
declare global {
  interface Window {
    authCallbackProcessing?: boolean;
  }
}

export default function AuthCallback() {
  const navigate = useNavigate();
  const executedRef = useRef(false);

  useEffect(() => {
    if (executedRef.current) return;
    executedRef.current = true;

    const handleAuthCallback = async () => {
      try {
        console.log('üîÑ Processing auth callback...');
        
        const urlParams = new URLSearchParams(window.location.search);
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
        const error = urlParams.get('error') || hashParams.get('error');
        if (error) {
          console.error('‚ùå Auth error:', error);
          window.location.replace('/');
          return;
        }

        // –ò—â–µ–º —Ç–æ–∫–µ–Ω—ã –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        const accessToken = urlParams.get('access_token') || hashParams.get('access_token');
        const refreshToken = urlParams.get('refresh_token') || hashParams.get('refresh_token');
        
        if (accessToken && refreshToken) {
          console.log('‚úÖ Tokens found, setting session...');
          
          const { error: sessionError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken
          });

          if (sessionError) {
            console.error('‚ùå Session error:', sessionError);
            window.location.replace('/');
            return;
          }

          console.log('‚úÖ Session set successfully');
          window.history.replaceState({}, '', '/');
          window.location.replace('/');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º verification —Ç–æ–∫–µ–Ω
        const token = urlParams.get('token') || hashParams.get('token');
        if (token) {
          console.log('‚úÖ Verification token found...');
          
          const { error: verifyError } = await supabase.auth.verifyOtp({
            token_hash: token,
            type: 'magiclink'
          });

          if (verifyError) {
            console.error('‚ùå Verification error:', verifyError);
            window.location.replace('/');
            return;
          }

          console.log('‚úÖ Token verified successfully');
          window.history.replaceState({}, '', '/');
          window.location.replace('/');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º magic link —Ç–æ–∫–µ–Ω –≤ hash
        const hashToken = window.location.hash.substring(1);
        if (hashToken && hashToken.includes('access_token=')) {
          console.log('‚úÖ Magic link token found in hash...');
          
          const hashParams = new URLSearchParams(hashToken);
          const accessToken = hashParams.get('access_token');
          const refreshToken = hashParams.get('refresh_token');
          
          if (accessToken && refreshToken) {
            console.log('‚úÖ Tokens found in hash, setting session...');
            
            const { error: sessionError } = await supabase.auth.setSession({
              access_token: accessToken,
              refresh_token: refreshToken
            });

            if (sessionError) {
              console.error('‚ùå Session error:', sessionError);
              window.location.replace('/');
              return;
            }

            console.log('‚úÖ Session set successfully from hash');
            window.history.replaceState({}, '', '/');
            window.location.replace('/');
            return;
          }
        }

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        console.log('‚ùå No auth tokens found');
        window.location.replace('/');

      } catch (error: any) {
        console.error('‚ùå Auth callback error:', error);
        window.location.replace('/');
      }
    };

    handleAuthCallback();
  }, [navigate]);

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π –≤ App.tsx
  return null;
}