import { useState } from 'react';
import { AppleSpinner, AppleLoadingScreen } from '../components/AppleSpinner';
import { UnifiedLoader } from '../components/UnifiedLoader';
import { useLoadingState } from '../hooks/useLoadingState';

export default function TestLoadingPage() {
  const [showOverlay, setShowOverlay] = useState(false);
  const [showFullscreen, setShowFullscreen] = useState(false);
  const [showInline, setShowInline] = useState(false);
  const [showMinimal, setShowMinimal] = useState(false);
  const [progress, setProgress] = useState(0);
  const [phase, setPhase] = useState('initializing');
  const [error, setError] = useState<string | null>(null);

  const loadingState = useLoadingState({
    maxConcurrentLoads: 1,
    debounceMs: 100
  });

  const phases = [
    'initializing',
    'session-fetch', 
    'profile-fetch',
    'auth-change',
    'profile-processing',
    'complete',
    'loading-test',
    'processing-answer',
    'saving-progress'
  ];

  const simulateLoading = async (variant: string) => {
    if (variant === 'overlay') {
      setShowOverlay(true);
      setProgress(0);
      setPhase('initializing');
      setError(null);
      
      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      for (let i = 0; i <= 100; i += 10) {
        await new Promise(resolve => setTimeout(resolve, 200));
        setProgress(i);
        if (i < 100) {
          setPhase(phases[Math.floor(i / 12)]);
        }
      }
      
      setTimeout(() => setShowOverlay(false), 1000);
    } else if (variant === 'fullscreen') {
      setShowFullscreen(true);
      setProgress(0);
      setPhase('initializing');
      setError(null);
      
      for (let i = 0; i <= 100; i += 10) {
        await new Promise(resolve => setTimeout(resolve, 200));
        setProgress(i);
        if (i < 100) {
          setPhase(phases[Math.floor(i / 12)]);
        }
      }
      
      setTimeout(() => setShowFullscreen(false), 1000);
    } else if (variant === 'inline') {
      setShowInline(true);
      setProgress(0);
      setPhase('initializing');
      setError(null);
      
      for (let i = 0; i <= 100; i += 10) {
        await new Promise(resolve => setTimeout(resolve, 200));
        setProgress(i);
        if (i < 100) {
          setPhase(phases[Math.floor(i / 12)]);
        }
      }
      
      setTimeout(() => setShowInline(false), 1000);
    } else if (variant === 'minimal') {
      setShowMinimal(true);
      setTimeout(() => setShowMinimal(false), 3000);
    } else if (variant === 'error') {
      setShowOverlay(true);
      setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
      setProgress(45);
      setPhase('error');
    } else if (variant === 'loading-state') {
      loadingState.startLoading('profile-fetch');
      setTimeout(() => {
        loadingState.stopLoading();
      }, 3000);
    } else if (variant === 'enhanced-loading') {
      setShowFullscreen(true);
      setProgress(0);
      setPhase('initializing');
      setError(null);
      
      // –°–∏–º—É–ª—è—Ü–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–∞–∑–∞–º–∏ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      const phases = [
        { phase: 'initializing', message: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã', subtitle: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...' },
        { phase: 'session-fetch', message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏', subtitle: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...' },
        { phase: 'profile-fetch', message: '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', subtitle: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...' },
        { phase: 'profile-processing', message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö', subtitle: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...' },
        { phase: 'complete', message: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ', subtitle: '–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!' }
      ];
      
      for (let i = 0; i < phases.length; i++) {
        await new Promise(resolve => setTimeout(resolve, 800));
        setPhase(phases[i].phase);
        setProgress((i + 1) * 20);
      }
      
      setTimeout(() => setShowFullscreen(false), 1000);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 p-8">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-gray-900 mb-8 text-center font-['Mabry']">
          –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - Apple —Å—Ç–∏–ª—å 2025
        </h1>

        {/* –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–∏–Ω–µ—Ä–æ–≤ */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12">
          <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/20">
            <h3 className="text-lg font-semibold text-gray-800 mb-4 font-['Mabry']">–†–∞–∑–º–µ—Ä—ã —Å–ø–∏–Ω–µ—Ä–æ–≤</h3>
            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <AppleSpinner size="sm" />
                <span className="text-sm text-gray-600">Small</span>
              </div>
              <div className="flex items-center space-x-3">
                <AppleSpinner size="md" />
                <span className="text-sm text-gray-600">Medium</span>
              </div>
              <div className="flex items-center space-x-3">
                <AppleSpinner size="lg" />
                <span className="text-sm text-gray-600">Large</span>
              </div>
              <div className="flex items-center space-x-3">
                <AppleSpinner size="xl" />
                <span className="text-sm text-gray-600">Extra Large</span>
              </div>
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/20">
            <h3 className="text-lg font-semibold text-gray-800 mb-4 font-['Mabry']">–¶–≤–µ—Ç–∞ —Å–ø–∏–Ω–µ—Ä–æ–≤</h3>
            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <AppleSpinner color="primary" />
                <span className="text-sm text-gray-600">Primary</span>
              </div>
              <div className="flex items-center space-x-3">
                <AppleSpinner color="white" />
                <span className="text-sm text-gray-600">White</span>
              </div>
              <div className="flex items-center space-x-3">
                <AppleSpinner color="gray" />
                <span className="text-sm text-gray-600">Gray</span>
              </div>
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/20">
            <h3 className="text-lg font-semibold text-gray-800 mb-4 font-['Mabry']">Loading Screen 2025</h3>
            <div className="space-y-6">
              <AppleLoadingScreen 
                message="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
                subtitle="–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
                progress={75}
                showProgress={true}
                showParticles={true}
              />
            </div>
          </div>

          <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-6 shadow-xl border border-white/20">
            <h3 className="text-lg font-semibold text-gray-800 mb-4 font-['Mabry']">Minimal Loader</h3>
            <div className="space-y-4">
              <UnifiedLoader 
                visible={showMinimal}
                variant="minimal"
                message="–û–±—Ä–∞–±–æ—Ç–∫–∞..."
              />
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          <button
            onClick={() => simulateLoading('overlay')}
            className="bg-[#06A478] hover:bg-[#05976b] text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1"
          >
            üé≠ Overlay Loader
          </button>

          <button
            onClick={() => simulateLoading('fullscreen')}
            className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1"
          >
            üñ•Ô∏è Fullscreen Loader
          </button>

          <button
            onClick={() => simulateLoading('inline')}
            className="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1"
          >
            üìÑ Inline Loader
          </button>

          <button
            onClick={() => simulateLoading('minimal')}
            className="bg-gray-600 hover:bg-gray-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1"
          >
            ‚ö° Minimal Loader
          </button>

          <button
            onClick={() => simulateLoading('error')}
            className="bg-red-600 hover:bg-red-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1"
          >
            ‚ùå Error State
          </button>

          <button
            onClick={() => simulateLoading('loading-state')}
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1"
          >
            üîÑ Loading State Hook
          </button>

          <button
            onClick={() => simulateLoading('enhanced-loading')}
            className="bg-gradient-to-r from-[#06A478] to-[#4ade80] hover:from-[#05976b] hover:to-[#22c55e] text-white font-semibold py-4 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1"
          >
            ‚ú® Enhanced Loading 2025
          </button>
        </div>

        {/* –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Inline Loader */}
        {showInline && (
          <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-8 shadow-xl border border-white/20 mb-8">
            <h3 className="text-xl font-semibold text-gray-800 mb-4 font-['Mabry']">Inline Loader Demo</h3>
            <UnifiedLoader 
              visible={showInline}
              variant="inline"
              phase={phase}
              progress={progress}
              showProgress={true}
              showTimer={true}
            />
          </div>
        )}

        {/* –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Loading State Hook */}
        {loadingState.isLoading && (
          <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-8 shadow-xl border border-white/20 mb-8">
            <h3 className="text-xl font-semibold text-gray-800 mb-4 font-['Mabry']">Loading State Hook Demo</h3>
            <div className="flex items-center space-x-4">
              <AppleSpinner size="lg" />
              <div>
                <p className="text-lg font-medium text-gray-800">–§–∞–∑–∞: {typeof loadingState.phase === 'string' ? loadingState.phase : 'unknown'}</p>
                <p className="text-sm text-gray-600">–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {loadingState.getLoadingDuration()} —Å–µ–∫.</p>
                <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {loadingState.activeLoadsCount}</p>
              </div>
            </div>
          </div>
        )}

        {/* –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ LoadingScreen */}
        <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-8 shadow-xl border border-white/20 mb-8">
          <h3 className="text-2xl font-semibold text-gray-800 mb-6 font-['Mabry']">–£–ª—É—á—à–µ–Ω–Ω—ã–π LoadingScreen 2025</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="space-y-6">
              <h4 className="text-lg font-semibold text-gray-700">–° —á–∞—Å—Ç–∏—Ü–∞–º–∏ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–º</h4>
              <div className="bg-gradient-to-br from-slate-50 to-blue-50 rounded-xl p-8">
                <AppleLoadingScreen 
                  message="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"
                  subtitle="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É..."
                  progress={45}
                  showProgress={true}
                  showParticles={true}
                />
              </div>
            </div>
            
            <div className="space-y-6">
              <h4 className="text-lg font-semibold text-gray-700">–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</h4>
              <div className="bg-gradient-to-br from-slate-50 to-blue-50 rounded-xl p-8">
                <AppleLoadingScreen 
                  message="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"
                  progress={90}
                  showProgress={true}
                  showParticles={false}
                />
              </div>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö */}
        <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-8 shadow-xl border border-white/20">
          <h3 className="text-2xl font-semibold text-gray-800 mb-6 font-['Mabry']">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div>
              <h4 className="text-lg font-semibold text-gray-700 mb-3">AppleSpinner</h4>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –†–∞–∑–º–µ—Ä—ã: sm, md, lg, xl</li>
                <li>‚Ä¢ –¶–≤–µ—Ç–∞: primary, white, gray</li>
                <li>‚Ä¢ Apple-—Å—Ç–∏–ª—å –∞–Ω–∏–º–∞—Ü–∏–∏ 2025</li>
                <li>‚Ä¢ –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã</li>
              </ul>
            </div>

            <div>
              <h4 className="text-lg font-semibold text-gray-700 mb-3">UnifiedLoader</h4>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç—ã: overlay, fullscreen, inline, minimal</li>
                <li>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ñ–∞–∑</li>
                <li>‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</li>
                <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ</li>
              </ul>
            </div>

            <div>
              <h4 className="text-lg font-semibold text-gray-700 mb-3">useLoadingState</h4>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è</li>
                <li>‚Ä¢ Debounce –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</li>
                <li>‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫</li>
                <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –æ—à–∏–±–æ–∫</li>
              </ul>
            </div>

            <div>
              <h4 className="text-lg font-semibold text-gray-700 mb-3">AppleLoadingScreen 2025</h4>
              <ul className="text-sm text-gray-600 space-y-2">
                <li>‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª—å—Ü–∞</li>
                <li>‚Ä¢ –ü–ª–∞–≤–∞—é—â–∏–µ —á–∞—Å—Ç–∏—Ü—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã</li>
                <li>‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º</li>
                <li>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤</li>
                <li>‚Ä¢ –ë–ª–µ—Å—Ç—è—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —Ç–µ–Ω–∏</li>
                <li>‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Unified Loaders */}
        <UnifiedLoader 
          visible={showOverlay}
          variant="overlay"
          phase={phase}
          progress={progress}
          showProgress={true}
          showTimer={true}
          error={error}
          onRetry={() => {
            setError(null);
            simulateLoading('overlay');
          }}
          allowCancel={true}
          onCancel={() => setShowOverlay(false)}
        />

        <UnifiedLoader 
          visible={showFullscreen}
          variant="fullscreen"
          phase={phase}
          progress={progress}
          showProgress={true}
          showTimer={true}
          error={error}
          onRetry={() => {
            setError(null);
            simulateLoading('fullscreen');
          }}
          allowCancel={true}
          onCancel={() => setShowFullscreen(false)}
        />
      </div>
    </div>
  );
}
