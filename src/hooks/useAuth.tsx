import React, { createContext, useContext, useEffect, useRef, useState, useCallback } from 'react';
import { supabase } from '../lib/supabase';
import { getUserFromCache, cacheUserProfile, isCachedUserValid } from '../lib/userCache';
import { Session } from '@supabase/supabase-js';
import { initializeSessionRecovery, saveLastLoginInfo } from '../utils/sessionRecovery';

// –†–∞—Å—à–∏—Ä—è–µ–º window –¥–ª—è —Ñ–ª–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
declare global {
  interface Window {
    authCallbackProcessing?: boolean;
  }
}

interface User {
  id: string;
  email?: string;
  sap_number?: string;
  full_name: string;
  position?: string;
  phone?: string;
  avatar_url?: string;
  role: 'employee' | 'supervisor' | 'trainer' | 'expert' | 'moderator' | 'administrator';
  subdivision: 'management_company' | 'branches';
  branch_subrole?: 'sales_representative' | 'supervisor' | 'branch_director';
  branch_id?: string;
  status: 'active' | 'inactive' | 'terminating' | 'transferring';
  work_experience_days: number;
  last_sign_in_at?: string;
  created_at: string;
  updated_at: string;
  territory_id?: string;
  position_id?: string;
  is_active: boolean;
  department?: string;
  is_leaving?: boolean;
}

type LoadingPhase = 
  | 'initializing' 
  | 'session-fetch' 
  | 'profile-fetch' 
  | 'auth-change' 
  | 'profile-processing' 
  | 'complete' 
  | 'error' 
  | 'reset'
  | 'ready'
  | 'logged-out';

interface AuthContextType {
  user: User | null;
  userProfile: User | null;
  session: Session | null;
  loading: boolean;
  authError: string | null;
  loadingPhase: LoadingPhase;
  signIn: (identifier: string, password: string) => Promise<{ data: any; error: any }>;
  signOut: () => Promise<any>;
  resetAuth: () => void;
  refreshProfile: () => Promise<void>;
  retryFetchProfile: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [userProfile, setUserProfile] = useState<User | null>(null); 
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true); 
  const [authError, setAuthError] = useState<string | null>(null);
  const [loadingPhase, setLoadingPhase] = useState<LoadingPhase>('initializing');
  const [retryCount, setRetryCount] = useState(0);

  // –•–µ–ª–ø–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–ª–æ—É
  const isAuthFlowPath = useCallback(() => {
    if (typeof window === 'undefined') return false;
    const p = window.location.pathname || '';
    return p.startsWith('/auth/');
  }, []);

  // single-flight
  const inFlightProfile = useRef<Promise<User | null> | null>(null);
  
  // ref –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ onAuthStateChange
  const userRef = useRef<User | null>(null);
  useEffect(() => { userRef.current = user; }, [user]);


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  useEffect(() => {
    const handleVisibilityChange = async () => {
      if (document.visibilityState === 'visible' && !session?.user && !loading) {
        console.log('üîÑ App became visible, checking session...');
        try {
          const sessionResult = await getSessionSoft(10000);
          if (sessionResult.data.session?.user) {
            console.log('‚úÖ Session restored on app visibility');
            setSession(sessionResult.data.session);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è
            const cachedUser = getUserFromCache(sessionResult.data.session.user.id);
            if (cachedUser && isCachedUserValid(cachedUser)) {
              console.log('‚úÖ Using cached profile on app restore');
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CachedUser –≤ User
              const userFromCache: User = {
                ...cachedUser,
                role: cachedUser.role as 'employee' | 'supervisor' | 'trainer' | 'expert' | 'moderator' | 'administrator',
                subdivision: 'management_company',
                status: 'active',
                work_experience_days: 0,
                is_active: true,
                department: 'management_company',
                phone: '',
                sap_number: undefined,
                position_id: undefined,
                branch_id: undefined,
                territory_id: undefined,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
              };
              setUser(userFromCache);
              setUserProfile(userFromCache);
            } else {
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ–Ω–µ
              fetchUserProfile(sessionResult.data.session.user.id, { foreground: false })
                .catch(e => console.warn('bg profile fetch on restore failed', e));
            }
          }
        } catch (e) {
          console.warn('Session check on visibility change failed:', e);
        }
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
  }, [session?.user, loading]);


  // Utility function to create fallback user
  const createFallbackUser = (
    userId: string, 
    email?: string, 
    fullName?: string, 
    type: 'emergency' | 'auth-based' | 'admin' = 'emergency'
  ): User => {
    const isAdmin = email === 'doirp@sns.ru';
    
    const typeLabels = {
      emergency: '–ê–≤–∞—Ä–∏–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å',
      'auth-based': '–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ auth –¥–∞–Ω–Ω—ã—Ö',
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—Ä—Ç–∞–ª–∞'
    };
    
    return {
      id: userId,
      email: email || `emergency-${Date.now()}@sns.local`,
      full_name: fullName || (isAdmin ? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—Ä—Ç–∞–ª–∞' : `${typeLabels[type]} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`),
      role: isAdmin ? 'administrator' : 'employee',
      subdivision: 'management_company',
      status: 'active',
      work_experience_days: 0,
      is_active: true,
      department: 'management_company',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    } as User;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
  const isSessionValid = (session: any) => {
    if (!session?.user) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫ (—Å –∑–∞–ø–∞—Å–æ–º –≤ 30 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª–µ–µ –º—è–≥–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
    const now = Math.floor(Date.now() / 1000);
    const expiresAt = session.expires_at;
    
    if (expiresAt && now >= expiresAt - 1800) {
      console.log('‚ö†Ô∏è Session token expires soon, will refresh');
      return false;
    }
    
    return true;
  };

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π getSession —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
  const getSessionSoft = async (timeoutMs = 30000) => {
    try {
      const res = await withTimeout(() => supabase.auth.getSession(), timeoutMs);
      return res;
    } catch (e) {
      console.warn('[Auth] getSession error/timeout:', (e as any)?.message || e);
      return { data: { session: null }, error: e as any };
    }
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ —Å —Ä—É—á–Ω—ã–º timeout
  async function withTimeout<T>(fn: () => Promise<T>, timeoutMs: number) {
    return Promise.race([
      fn(),
      new Promise<never>((_, reject) => setTimeout(() => reject(new Error('timeout')), timeoutMs))
    ]);
  }

  async function tryFetchProfileRow(userId: string) {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .limit(1)
      .maybeSingle();

    if (error) throw error;
    // –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ‚Äî data === null –±–µ–∑ error
    return data as User | null;
  }

  // –ê–∫–∫—É—Ä–∞—Ç–Ω–æ–µ –∞–≤—Ç–æ-—Å–æ–∑–¥–∞–Ω–∏–µ —Å –º—è–≥–∫–∏–º fallback
  async function ensureProfile(userId: string): Promise<User> {
    const { data: auth } = await supabase.auth.getUser();
    const meta = auth?.user?.user_metadata || {};
    const base: User = {
          id: userId,
      email: auth?.user?.email || `user-${userId}@sns.local`,
      full_name: meta.full_name || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId.slice(0, 8)}`,
      role: (auth?.user?.email === 'doirp@sns.ru') ? 'administrator' : 'employee',
          subdivision: 'management_company',
          status: 'active',
          work_experience_days: 0,
          is_active: true,
      department: meta.department || 'management_company',
      phone: meta.phone || '',
      sap_number: meta.sap_number || null,
      position_id: meta.position_id || null,
      branch_id: meta.branch_id || null,
      territory_id: meta.territory_id || null,
          created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    } as User;

    // –ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å; –ø—Ä–∏ RLS –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º base
    const { data: saved, error } = await supabase
          .from('users')
      .upsert(base, { onConflict: 'id' })
      .select('*')
      .maybeSingle();

    if (error) {
      console.warn('‚ö†Ô∏è RLS/insert blocked, using fallback profile in-memory:', error.message);
      return base;
    }
    return (saved || base) as User;
  }



  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è ‚Äî single-flight + backoff + –¥–ª–∏–Ω–Ω—ã–π timeout
  const fetchUserProfile = useCallback(async (userId: string, {foreground = true}: {foreground?: boolean} = {}) => {
    if (!userId) {
      setAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      setLoading(false);
      setLoadingPhase('error');
      return;
    }

    // –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (window.location.pathname.startsWith('/auth/') || window.authCallbackProcessing) {
      console.log('‚è≠ Bypass fetchUserProfile during auth flow');
      return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    const { data: { session } } = await supabase.auth.getSession();
    if (!session?.user) {
      console.log('‚è≥ No session, skipping profile fetch');
      return;
    }

    // –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å ‚Äî –∂–¥—ë–º –µ–≥–æ
    if (inFlightProfile.current) {
      console.log('‚è≥ Awaiting in-flight profile request');
      const u = await inFlightProfile.current;
      if (u) {
        setUser(u);
        setUserProfile(u);
        cacheUserProfile(u);
        if (foreground) {
          setLoading(false);
          setLoadingPhase('complete');
        }
      } else if (foreground) {
        setLoading(false);
        setLoadingPhase('complete');
      }
      return;
    }
    
    const runner = (async (): Promise<User | null> => {
      try {
        if (foreground) {
          setLoadingPhase('profile-fetch');
          setLoading(true);
          setAuthError(null);
        }

        // 1) –∫—ç—à - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –∏ –Ω–µ –∂–¥–µ–º
        const cached = getUserFromCache(userId);
        if (cached && isCachedUserValid(cached)) {
          console.log('‚úÖ Using cached user profile:', cached.id);
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CachedUser –≤ User
          const userFromCache: User = {
            ...cached,
            role: cached.role as 'employee' | 'supervisor' | 'trainer' | 'expert' | 'moderator' | 'administrator',
            subdivision: 'management_company',
            status: 'active',
            work_experience_days: 0,
            is_active: true,
            department: 'management_company',
            phone: '',
            sap_number: undefined,
            position_id: undefined,
            branch_id: undefined,
            territory_id: undefined,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
          };
          setUser(userFromCache);
          setUserProfile(userFromCache);

          if (foreground) {
            // –ü–æ–∫–∞–∑–∞–ª–∏ –∫—ç—à –∏ –û–î–ò–ù —Ä–∞–∑ –æ–±–Ω–æ–≤–∏–º –∏–∑ —Å–µ—Ç–∏ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏
            setLoading(false);
            setLoadingPhase('complete');

              // –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
              (async () => {
                try {
                  console.log('üîÑ Background profile refresh');
                  const row = await withTimeout(() => tryFetchProfileRow(userId), 8000);
                  if (row) {
                    const fresh = { ...row, position: row.position || '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞' } as User;
                    setUser(fresh);
                    setUserProfile(fresh);
                    cacheUserProfile(fresh);
                  }
                } catch (e: any) {
                  console.warn('Background refresh failed:', e.message || e);
                }
              })();

            return userFromCache;
          }

          // –ï—Å–ª–∏ —ç—Ç–æ background-–≤—ã–∑–æ–≤ ‚Äî –ù–ï –≤—ã—Ö–æ–¥–∏–º –∑–¥–µ—Å—å.
          // –ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∏–∂–µ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞).
        }

        // 2) –°–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        try {
          const row = await withTimeout(() => tryFetchProfileRow(userId), 10000);
          if (row) {
            const u = { ...row, position: row.position || '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞' } as User;
            setUser(u);
            setUserProfile(u);
            cacheUserProfile(u);
            if (foreground) {
              setLoading(false);
              setLoadingPhase('complete');
            }
            return u;
          }
          // —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
          const created = await withTimeout(() => ensureProfile(userId), 10000);
          const u = { ...created, position: created.position || '–î–æ–ª–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞' } as User;
          setUser(u);
          setUserProfile(u);
          cacheUserProfile(u);
          if (foreground) {
            setLoading(false);
            setLoadingPhase('complete');
          }
          return u;
        } catch (e: any) {
          console.warn('üîÅ Profile fetch failed:', e.message || e);
        }

        // 3) –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫
        
        console.warn('üö® Using auth-based fallback after retries');
        const { data: authData } = await supabase.auth.getUser();
        const fb = createFallbackUser(userId, authData?.user?.email, authData?.user?.user_metadata?.full_name, 'auth-based');
        setUser(fb);
        setUserProfile(fb);
        cacheUserProfile(fb);
        if (foreground) {
          setAuthError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ë–î. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.');
          setLoading(false);
          setLoadingPhase('complete'); // –Ω–µ 'error', —á—Ç–æ–±—ã UI –Ω–µ –ø—Ä–∏–ª–∏–ø–∞–ª
        }
        return fb;
      } finally {
        inFlightProfile.current = null;
      }
    })();

    inFlightProfile.current = runner;
    await runner;
  }, []);

  // –†–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–ª–ª–±—ç–∫–∞ - –¥–æ—Ç—è–Ω—É—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ /auth/*
  useEffect(() => {
    if (!window.location.pathname.startsWith('/auth/') && session?.user && !userProfile) {
      console.log('üîÑ Post-auth: fetching profile after callback');
      fetchUserProfile(session.user.id, { foreground: false })
        .catch(e => console.warn('post-auth bg fetch failed', e));
    }
  }, [session?.user, userProfile]);

  // Retry mechanism
  const retryFetchProfile = async () => {
    if (retryCount >= 3) {
      console.warn('‚ö†Ô∏è Maximum retry attempts reached');
      setAuthError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      return;
    }
    
    if (session?.user?.id) {
      setRetryCount(prev => prev + 1);
      console.log(`üîÑ Retrying profile fetch (attempt ${retryCount + 1}/3)`);
      await fetchUserProfile(session.user.id, { foreground: true });
    }
  };

  // –†—É—á–Ω–æ–π refresh ‚Äî –±–µ–∑ ¬´–ª–æ–º–∞–Ω–∏—è¬ª —Ñ–∞–∑ –∏ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  const refreshProfile = async () => {
    if (!session?.user) return;
      console.log('üîÑ Refreshing user profile...');
    try {
      await fetchUserProfile(session.user.id, { foreground: true });
      console.log('‚úÖ Profile refresh completed');
    } catch (e) {
      console.warn('‚ö†Ô∏è Refresh failed:', (e as any)?.message);
    }
  };

  const resetAuth = () => {
    console.log('üîÑ Resetting authentication state and clearing cache');
    setLoading(false);
    setUser(null);
    setAuthError(null);
    setUserProfile(null);
    setSession(null);
    setRetryCount(0);
    setLoadingPhase('reset');
    
    // –û—á–∏—â–∞–µ–º sessionStorage, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      const cachedUsers = localStorage.getItem('cached_users');
      
      // –û—á–∏—â–∞–µ–º sessionStorage –ø–æ–ª–Ω–æ—Å—Ç—å—é
      sessionStorage.clear();
      
      // –û—á–∏—â–∞–µ–º localStorage, –Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      localStorage.clear();
      
      if (cachedUsers) {
        localStorage.setItem('cached_users', cachedUsers);
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞');
      }
      
      console.log('üßπ Cleared sessionStorage, preserved user cache');
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not clear storage:', error);
    }
    
    supabase.auth.signOut();
    
    // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ø—Ä–æ—Å—Ç–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–æ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏—Ç—Å—è
  };

  const signIn = async (identifier: string, password: string): Promise<{ data: any; error: any }> => {
    console.log(`üîë Attempting to sign in with identifier: ${identifier}`);
    
    setAuthError(null);
    setLoading(true);
    setLoadingPhase('auth-change');

    try {
      const isEmail = identifier.includes('@');
      console.log(`üîë Login type: ${isEmail ? 'email' : 'SAP'}`);
      
      if (isEmail) {
        // Email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const result = await withTimeout(
          () => supabase.auth.signInWithPassword({ email: identifier, password }),
          10000
        );
        
        if (result.error) {
          const errorMessage = getAuthErrorMessage(result.error.message);
          setAuthError(errorMessage);
          setLoading(false);
          setLoadingPhase('error');
          console.log('üìù Sign in error:', errorMessage);
          return { data: result.data, error: { message: errorMessage } };
        }
        
        console.log('‚úÖ Email sign in success');
        setAuthError(null);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
        if (result.data?.user) {
          cacheUserProfile(result.data.user);
        }
        
        return result;
      } else {
        // SAP –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const sapResult = await withTimeout(
          () => Promise.resolve(supabase
            .from('users')
            .select('email')
            .eq('sap_number', identifier.trim())
            .maybeSingle()),
          8000
        );
        const { data: userData, error: userError } = sapResult as any;

        if (userError || !userData?.email) {
          const errorMsg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º SAP –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω';
          setAuthError(errorMsg);
          setLoading(false);
          setLoadingPhase('error');
          return { data: null, error: { message: errorMsg } };
        }

        const sapAuthResult = await withTimeout(
          () => supabase.auth.signInWithPassword({ email: userData.email, password }),
          10000
        );
        
        if ((sapAuthResult as any).error) {
          const errorMessage = (sapAuthResult as any).error.message.includes('Invalid login credentials') 
            ? '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ SAP –Ω–æ–º–µ—Ä–∞'
            : getAuthErrorMessage((sapAuthResult as any).error.message);
          setAuthError(errorMessage);
          setLoading(false);
          setLoadingPhase('error');
          return { data: (sapAuthResult as any).data, error: { message: errorMessage } };
        }
        
        console.log('‚úÖ SAP sign in success');
        setAuthError(null);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
        if ((sapAuthResult as any).data?.user) {
          cacheUserProfile((sapAuthResult as any).data.user);
        }
        
        return sapAuthResult as any;
      }
    } catch (error: any) {
      console.error('‚ùå Error in signIn:', error);
      const errorMsg = error.message === 'timeout' 
        ? '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.'
        : `–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
      setAuthError(errorMsg);
      setLoading(false);
      setLoadingPhase('error');
      return { data: null, error: { message: errorMsg } };
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
  const getAuthErrorMessage = (errorMessage: string): string => {
    if (errorMessage.includes('Invalid login credentials')) {
      return '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.';
    } else if (errorMessage.includes('Email not confirmed')) {
      return 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.';
    } else if (errorMessage.includes('Too many requests')) {
      return '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    } else if (errorMessage.includes('User not found')) {
      return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
    }
    return errorMessage;
  };

  const signOut = async () => {
    console.log('üö™ Signing out user');

    // 1) –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const result = await supabase.auth.signOut();

    // 2) –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    setUser(null);
    setUserProfile(null);
    setSession(null);
    setAuthError(null);
    setRetryCount(0);
    setLoadingPhase('logged-out');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    try {
      const cachedUsers = localStorage.getItem('cached_users');
      
      // –û—á–∏—â–∞–µ–º sessionStorage –ø–æ–ª–Ω–æ—Å—Ç—å—é
      sessionStorage.clear();
      
      // –û—á–∏—â–∞–µ–º localStorage, –Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      localStorage.clear();
      
      if (cachedUsers) {
        localStorage.setItem('cached_users', cachedUsers);
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞');
      }
      
      console.log('üßπ Cleared sessionStorage, preserved user cache');
    } catch (e) {
      console.warn('‚ö†Ô∏è Could not clear storage:', e);
    }
    return result;
  };

  // Main effect for authentication state management
  useEffect(() => {
    let isMounted = true;
    let refreshInterval: NodeJS.Timeout | null = null;
    let lastRefreshTime = 0;
    let isRefreshing = false;
    
    console.log('üîê Auth provider initialized');
    console.log('üîê useAuth: window.authCallbackProcessing =', window.authCallbackProcessing);
    
    // Initialize authentication
    const initializeAuth = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ AuthCallback
      if (window.authCallbackProcessing) {
        console.log('‚è≥ AuthCallback is processing, skipping initialization');
        setLoadingPhase('auth-change');
        setLoading(true);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
        setTimeout(() => {
          if (window.authCallbackProcessing) {
            console.log('üîÑ useAuth: Force clearing flag after timeout');
            window.authCallbackProcessing = false;
          }
        }, 2000);
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
      const { data: { session: existingSession } } = await supabase.auth.getSession();
      if (existingSession?.user && user) {
        console.log('‚úÖ User already authenticated and profile loaded, skipping initialization');
        setLoadingPhase('complete');
        setLoading(false);
        return;
      }
      
      setLoadingPhase('session-fetch');
      console.log('üì• Starting session fetch');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
      await initializeSessionRecovery();
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        const sessionResult = await getSessionSoft(30000);
        if (!isMounted) return;
        
        const session = sessionResult.data.session;
        setSession(session);
        
        if (session?.user) {
          console.log('‚úÖ Initial session found');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—Ö–æ–¥–µ
          saveLastLoginInfo(session.user.email || 'unknown');
          
          if (window.location.pathname.startsWith('/auth/') || window.authCallbackProcessing) {
            console.log('‚è∏ Skip initial profile fetch during auth flow');
            setLoadingPhase('ready');
            setLoading(false);
          } else {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è
  const cachedUser = getUserFromCache(session.user.id);
  if (cachedUser && isCachedUserValid(cachedUser)) {
    console.log('‚úÖ Using cached user profile');
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CachedUser –≤ User
              const userFromCache: User = {
                ...cachedUser,
                role: cachedUser.role as 'employee' | 'supervisor' | 'trainer' | 'expert' | 'moderator' | 'administrator',
                subdivision: 'management_company',
                status: 'active',
                work_experience_days: 0,
                is_active: true,
                department: 'management_company',
                phone: '',
                sap_number: undefined,
                position_id: undefined,
                branch_id: undefined,
                territory_id: undefined,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
              };
    setUser(userFromCache);
    setUserProfile(userFromCache);
              setLoadingPhase('complete');
              setLoading(false);
              
              // –¢–∏—Ö–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ–Ω–µ
              fetchUserProfile(session.user.id, { foreground: false })
                .catch(e => console.warn('bg profile update failed', e));
            } else {
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ–Ω–µ
              setLoadingPhase('ready');
              setLoading(false);
              fetchUserProfile(session.user.id, { foreground: false })
                .catch(e => console.warn('initial profile fetch failed', e));
            }
          }
        } else {
          console.log('‚ÑπÔ∏è No initial session found');
          setLoadingPhase('ready');
          setLoading(false);
        }
      } catch (error: any) {
        console.error('‚ùå Error in initializeAuth:', error);
        
        if (!isMounted) return;
        
        console.warn('‚ö†Ô∏è Auth initialization failed:', error.message);
        setLoadingPhase('ready');
        setLoading(false);
      }
    };

    // Start initialization
    initializeAuth();

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞)
    const startTokenRefresh = () => {
      if (refreshInterval) clearInterval(refreshInterval);
      
      // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
      refreshInterval = setInterval(async () => {
        if (!isMounted || isRefreshing) return;
        
        try {
          const { data: { session: currentSession } } = await supabase.auth.getSession();
          if (currentSession?.user) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const now = Date.now();
            if (now - lastRefreshTime < 5 * 60 * 1000) { // –º–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
              console.log('‚è≥ Skipping refresh - too soon since last refresh');
              return;
            }
            
            console.log('üîÑ Periodic token refresh triggered (keep-alive)');
            isRefreshing = true;
            lastRefreshTime = now;
            
            const { data, error } = await supabase.auth.refreshSession();
            if (error) {
              console.warn('Periodic refresh failed:', error);
              // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
              if (error.message?.includes('expired') || error.message?.includes('invalid')) {
                console.log('üîÑ Token expired, attempting to restore session...');
                const { data: restoredSession } = await supabase.auth.getSession();
                if (restoredSession?.session) {
                  console.log('‚úÖ Session restored from storage');
                  setSession(restoredSession.session);
                }
              }
            } else if (data.session) {
              console.log('‚úÖ Periodic refresh successful - session extended');
              setSession(data.session);
            }
          }
        } catch (e) {
          console.warn('Periodic refresh error:', e);
        } finally {
          isRefreshing = false;
        }
      }, 30 * 60 * 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 4 —á–∞—Å–æ–≤
    };

    // Listen for auth changes
    const authSubscription = supabase.auth.onAuthStateChange(async (event, session) => {
      if (!isMounted) return;
      
      console.log('üîÑ Auth state changed:', event, session?.user?.id?.substring(0, 8));
      console.log('üîÑ useAuth: window.authCallbackProcessing =', window.authCallbackProcessing);
      setSession(session);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (session?.user) {
        startTokenRefresh();
      } else {
        if (refreshInterval) {
          clearInterval(refreshInterval);
          refreshInterval = null;
        }
      }
      
      // INITIAL_SESSION –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ initializeAuth, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (event === 'INITIAL_SESSION') {
        return;
      }
      
      // TOKEN_REFRESHED - —Ç–æ–∫–µ–Ω —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å
      if (event === 'TOKEN_REFRESHED') {
        console.log('‚úÖ Token refreshed by Supabase');
        isRefreshing = false;
        lastRefreshTime = Date.now();
        return;
      }

      // –Ω–µ –¥—ë—Ä–≥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–∫–∞ –∫–æ–ª–ª–±—ç–∫ –µ—â—ë –∂—É—ë—Ç —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –º—ã –Ω–∞ /auth/*
      if (window.authCallbackProcessing || window.location.pathname.startsWith('/auth/')) {
        console.log('‚è∏ Skip profile fetch during auth flow');
        setLoadingPhase('ready');
        setLoading(false);
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π (SIGNED_IN, SIGNED_OUT, TOKEN_REFRESHED, etc.)
      if (session?.user && isSessionValid(session)) {
        console.log('‚úÖ Valid session found after auth change');
        
        // Check if user is the same as current user
        if (userRef.current?.id === session.user.id) {
          console.log('‚úÖ User ID matches existing user, keeping current profile');
          setLoadingPhase('complete');
          setLoading(false);
          return;
        }
        
        // Different user or no current user, try cache first
        const cachedUser = getUserFromCache(session.user.id);
        if (cachedUser && isCachedUserValid(cachedUser)) {
          console.log('‚úÖ Using cached profile for session restoration');
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CachedUser –≤ User
              const userFromCache: User = {
                ...cachedUser,
                role: cachedUser.role as 'employee' | 'supervisor' | 'trainer' | 'expert' | 'moderator' | 'administrator',
                subdivision: 'management_company',
                status: 'active',
                work_experience_days: 0,
                is_active: true,
                department: 'management_company',
                phone: '',
                sap_number: undefined,
                position_id: undefined,
                branch_id: undefined,
                territory_id: undefined,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
              };
          setUser(userFromCache);
          setUserProfile(userFromCache);
          setLoadingPhase('complete');
          setLoading(false);
          
          // –¢–∏—Ö–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ–Ω–µ
          fetchUserProfile(session.user.id, { foreground: false })
            .catch(e => console.warn('bg profile update failed', e));
        } else {
          // Fetch profile from server
          console.log('üîÑ Fetching profile for user:', session.user.id);
          setLoadingPhase('complete');
          setLoading(false);
          // —Ñ–æ–Ω–æ–≤–æ, –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          fetchUserProfile(session.user.id, { foreground: false })
            .catch(e => console.warn('bg profile fetch failed', e));
        }
      } else {
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —è–≤–Ω—ã–π SIGNED_OUT, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (event === 'SIGNED_OUT') {
          console.log('‚ÑπÔ∏è User signed out, clearing state');
          setLoadingPhase('logged-out');
          setUser(null);
          setUserProfile(null);
          setLoading(false);
        } else if (session?.user && !isSessionValid(session)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º—Å—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
          const now = Date.now();
          if (isRefreshing || (now - lastRefreshTime < 2 * 60 * 1000)) { // –º–∏–Ω–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            console.log('‚è≥ Skipping refresh - too soon or already refreshing');
            return;
          }
          
          console.log('‚ö†Ô∏è Session invalid, attempting refresh');
          isRefreshing = true;
          lastRefreshTime = now;
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
          const refreshSession = async (attempts = 0) => {
            try {
              const { data, error } = await supabase.auth.refreshSession();
              if (error) throw error;
              
              if (data.session) {
                console.log('‚úÖ Session refreshed successfully');
                setSession(data.session);
                isRefreshing = false;
                return;
              }
            } catch (e) {
              console.warn(`Failed to refresh session (attempt ${attempts + 1}):`, e);
              if (attempts < 1) { // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => refreshSession(attempts + 1), 5000);
              } else {
                console.warn('All refresh attempts failed, signing out');
                isRefreshing = false;
                setLoadingPhase('logged-out');
                setUser(null);
                setUserProfile(null);
                setLoading(false);
              }
            }
          };
          
          refreshSession();
        } else {
          console.log('‚ÑπÔ∏è No session but not signed out, keeping current state');
          // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, TOKEN_REFRESHED)
        }
      }
    });

    // Return cleanup function
    return () => {
      console.log('üîê useAuth: Cleanup function called');
      isMounted = false;
      if (refreshInterval) {
        console.log('üîê useAuth: Clearing refresh interval');
        clearInterval(refreshInterval);
      }
      console.log('üîê useAuth: Unsubscribing from auth changes');
      authSubscription?.data?.subscription?.unsubscribe?.();
      console.log('üîê useAuth: Cleanup completed');
    };
  }, []);

  // –£–î–ê–õ–ï–ù –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ç–∞–π–º–µ—Ä - –æ–Ω –±—ã–ª –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º

  const value: AuthContextType = {
    user,
    userProfile,
    session,
    loading,
    authError,
    loadingPhase,
    signIn,
    signOut,
    resetAuth,
    refreshProfile,
    retryFetchProfile
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth(): AuthContextType {
  const context = useContext(AuthContext);
  if (context === undefined) {
    console.error('‚ùå useAuth used outside AuthProvider - this is a critical error');
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}