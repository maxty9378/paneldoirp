import { useState, useEffect, useCallback } from 'react';
import { supabase } from '../lib/supabase';
import { Achievement, UserAchievement, AchievementStats } from '../types/achievements';

// –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
const PREDEFINED_ACHIEVEMENTS: Achievement[] = [
  // –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏
  {
    id: 'welcome',
    title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
    description: '–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
    category: 'starter',
    rarity: 'common',
    icon: 'üëã',
    color: 'text-blue-600',
    gradient: 'from-blue-400 to-blue-600',
    isUnlocked: false,
  },
  {
    id: 'first_event',
    title: '–ü–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
    description: '–£—á–∞—Å—Ç–∏–µ –≤ –ø–µ—Ä–≤–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏',
    category: 'starter',
    rarity: 'common',
    icon: 'üìÖ',
    color: 'text-green-600',
    gradient: 'from-green-400 to-green-600',
    isUnlocked: false,
  },
  {
    id: 'first_test',
    title: '–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç',
    description: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞',
    category: 'starter',
    rarity: 'common',
    icon: '‚úÖ',
    color: 'text-purple-600',
    gradient: 'from-purple-400 to-purple-600',
    isUnlocked: false,
  },
  {
    id: 'first_victory',
    title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
    description: '–£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞',
    category: 'starter',
    rarity: 'rare',
    icon: 'üéØ',
    color: 'text-yellow-600',
    gradient: 'from-yellow-400 to-yellow-600',
    isUnlocked: false,
  },
  
  // –û–±—É—á–µ–Ω–∏–µ
  {
    id: 'bookworm',
    title: '–ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å',
    description: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ 5 —Ç–µ—Å—Ç–æ–≤',
    category: 'learning',
    rarity: 'common',
    icon: 'üìñ',
    color: 'text-indigo-600',
    gradient: 'from-indigo-400 to-indigo-600',
    isUnlocked: false,
    progress: 0,
    maxProgress: 5,
  },
  {
    id: 'sharpshooter',
    title: '–°—Ç—Ä–µ–ª–æ–∫',
    description: '100% —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ—Å—Ç–µ',
    category: 'learning',
    rarity: 'rare',
    icon: 'üéØ',
    color: 'text-red-600',
    gradient: 'from-red-400 to-red-600',
    isUnlocked: false,
  },
  {
    id: 'sprinter',
    title: '–°–ø—Ä–∏–Ω—Ç–µ—Ä',
    description: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞ —Ä–µ–∫–æ—Ä–¥–Ω–æ–µ –≤—Ä–µ–º—è',
    category: 'learning',
    rarity: 'epic',
    icon: 'üèÉ‚Äç‚ôÇÔ∏è',
    color: 'text-orange-600',
    gradient: 'from-orange-400 to-orange-600',
    isUnlocked: false,
  },
  {
    id: 'erudite',
    title: '–≠—Ä—É–¥–∏—Ç',
    description: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ 10 —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ –±–µ–∑ –æ—à–∏–±–æ–∫',
    category: 'learning',
    rarity: 'legendary',
    icon: 'üß†',
    color: 'text-purple-600',
    gradient: 'from-purple-400 to-purple-600',
    isUnlocked: false,
    progress: 0,
    maxProgress: 10,
  },
  
  // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  {
    id: 'fire',
    title: '–û–≥–æ–Ω—å',
    description: '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
    category: 'activity',
    rarity: 'rare',
    icon: 'üî•',
    color: 'text-red-600',
    gradient: 'from-red-400 to-red-600',
    isUnlocked: false,
    progress: 0,
    maxProgress: 7,
  },
  {
    id: 'lightning',
    title: '–ú–æ–ª–Ω–∏—è',
    description: '–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
    category: 'activity',
    rarity: 'epic',
    icon: '‚ö°',
    color: 'text-yellow-600',
    gradient: 'from-yellow-400 to-yellow-600',
    isUnlocked: false,
  },
  {
    id: 'accuracy',
    title: '–¢–æ—á–Ω–æ—Å—Ç—å',
    description: '90%+ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ 5 —Ç–µ—Å—Ç–∞—Ö –ø–æ–¥—Ä—è–¥',
    category: 'activity',
    rarity: 'epic',
    icon: 'üéØ',
    color: 'text-green-600',
    gradient: 'from-green-400 to-green-600',
    isUnlocked: false,
    progress: 0,
    maxProgress: 5,
  },
  
  // –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞
  {
    id: 'champion',
    title: '–ß–µ–º–ø–∏–æ–Ω',
    description: '–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≥—Ä—É–ø–ø–µ',
    category: 'expertise',
    rarity: 'legendary',
    icon: 'üèÜ',
    color: 'text-yellow-600',
    gradient: 'from-yellow-400 to-yellow-600',
    isUnlocked: false,
  },
  {
    id: 'veteran',
    title: '–í–µ—Ç–µ—Ä–∞–Ω',
    description: '–°—Ç–∞–∂ —Ä–∞–±–æ—Ç—ã 1+ –≥–æ–¥',
    category: 'expertise',
    rarity: 'epic',
    icon: 'üéñÔ∏è',
    color: 'text-gray-600',
    gradient: 'from-gray-400 to-gray-600',
    isUnlocked: false,
  },
];

export function useAchievements(userId?: string) {
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [userAchievements, setUserAchievements] = useState<UserAchievement[]>([]);
  const [stats, setStats] = useState<AchievementStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const fetchUserAchievements = useCallback(async () => {
    if (!userId) return;

    try {
      setLoading(true);
      setError(null);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      const { data: userData } = await supabase
        .from('users')
        .select('work_experience_days, created_at, last_sign_in_at')
        .eq('id', userId)
        .single();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
      const { data: testAttempts } = await supabase
        .from('user_test_attempts')
        .select('score, max_score, status, completed_at, start_time')
        .eq('user_id', userId);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
      const { data: eventParticipants } = await supabase
        .from('event_participants')
        .select('event_id, attended, created_at')
        .eq('user_id', userId);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
      const { data: events } = await supabase
        .from('events')
        .select('id, event_type_id, start_date')
        .in('id', eventParticipants?.map(ep => ep.event_id) || []);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const updatedAchievements = PREDEFINED_ACHIEVEMENTS.map(achievement => {
        let isUnlocked = false;
        let progress = 0;
        let maxProgress = achievement.maxProgress || 1;

        switch (achievement.id) {
          case 'welcome':
            isUnlocked = !!userData?.created_at;
            break;

          case 'first_event':
            isUnlocked = (eventParticipants?.length || 0) > 0;
            break;

          case 'first_test':
            isUnlocked = (testAttempts?.length || 0) > 0;
            break;

          case 'first_victory':
            isUnlocked = (testAttempts?.some(ta => ta.status === 'completed' && ta.score && ta.max_score && ta.score >= ta.max_score) || false);
            break;

          case 'bookworm':
            const completedTests = testAttempts?.filter(ta => ta.status === 'completed').length || 0;
            progress = completedTests;
            isUnlocked = completedTests >= 5;
            break;

          case 'sharpshooter':
            isUnlocked = testAttempts?.some(ta => ta.status === 'completed' && ta.score && ta.max_score && ta.score === ta.max_score) || false;
            break;

          case 'erudite':
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - 10 —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ —Å —Ö–æ—Ä–æ—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            const goodTests = testAttempts?.filter(ta => ta.status === 'completed' && ta.score && ta.max_score && (ta.score / ta.max_score) >= 0.8).length || 0;
            progress = goodTests;
            isUnlocked = goodTests >= 10;
            break;

          case 'veteran':
            isUnlocked = (userData?.work_experience_days || 0) >= 365;
            break;

          case 'accuracy':
            const accurateTests = testAttempts?.filter(ta => ta.status === 'completed' && ta.score && ta.max_score && (ta.score / ta.max_score) >= 0.9).length || 0;
            progress = accurateTests;
            isUnlocked = accurateTests >= 5;
            break;

          default:
            break;
        }

        return {
          ...achievement,
          isUnlocked,
          progress: isUnlocked ? maxProgress : progress,
        };
      });

      setAchievements(updatedAchievements);

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const unlockedCount = updatedAchievements.filter(a => a.isUnlocked).length;
      const totalCount = updatedAchievements.length;
      const recentUnlocks = updatedAchievements
        .filter(a => a.isUnlocked)
        .sort((a, b) => (b.unlockedAt?.getTime() || 0) - (a.unlockedAt?.getTime() || 0))
        .slice(0, 3);

      const categories = {
        starter: {
          unlocked: updatedAchievements.filter(a => a.category === 'starter' && a.isUnlocked).length,
          total: updatedAchievements.filter(a => a.category === 'starter').length,
        },
        learning: {
          unlocked: updatedAchievements.filter(a => a.category === 'learning' && a.isUnlocked).length,
          total: updatedAchievements.filter(a => a.category === 'learning').length,
        },
        activity: {
          unlocked: updatedAchievements.filter(a => a.category === 'activity' && a.isUnlocked).length,
          total: updatedAchievements.filter(a => a.category === 'activity').length,
        },
        expertise: {
          unlocked: updatedAchievements.filter(a => a.category === 'expertise' && a.isUnlocked).length,
          total: updatedAchievements.filter(a => a.category === 'expertise').length,
        },
        social: {
          unlocked: updatedAchievements.filter(a => a.category === 'social' && a.isUnlocked).length,
          total: updatedAchievements.filter(a => a.category === 'social').length,
        },
      };

      setStats({
        totalAchievements: totalCount,
        unlockedAchievements: unlockedCount,
        completionRate: totalCount > 0 ? (unlockedCount / totalCount) * 100 : 0,
        recentUnlocks,
        categories,
      });

    } catch (err) {
      console.error('Error fetching achievements:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
    } finally {
      setLoading(false);
    }
  }, [userId]);

  useEffect(() => {
    if (userId) {
      fetchUserAchievements();
    }
  }, [userId, fetchUserAchievements]);

  return {
    achievements,
    userAchievements,
    stats,
    loading,
    error,
    refetch: fetchUserAchievements,
  };
}


