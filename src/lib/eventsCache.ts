// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
interface CachedEvents {
  data: any[];
  timestamp: number;
  userId: string;
  userRole: string;
}

const CACHE_KEY = 'cached_events';
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

export function getCachedEvents(userId: string, userRole: string): any[] | null {
  try {
    const cached = localStorage.getItem(CACHE_KEY);
    if (!cached) return null;

    const parsed: CachedEvents = JSON.parse(cached);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –∞–∫—Ç—É–∞–ª–µ–Ω –∏ –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isExpired = Date.now() - parsed.timestamp > CACHE_DURATION;
    const isSameUser = parsed.userId === userId && parsed.userRole === userRole;
    
    if (isExpired || !isSameUser) {
      localStorage.removeItem(CACHE_KEY);
      return null;
    }

    console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –∫—ç—à–∞:', parsed.data.length);
    return parsed.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
    return null;
  }
}

export function setCachedEvents(events: any[], userId: string, userRole: string): void {
  try {
    const cached: CachedEvents = {
      data: events,
      timestamp: Date.now(),
      userId,
      userRole
    };
    
    localStorage.setItem(CACHE_KEY, JSON.stringify(cached));
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –∫—ç—à:', events.length);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
  }
}

export function clearEventsCache(): void {
  try {
    localStorage.removeItem(CACHE_KEY);
    console.log('üßπ –û—á–∏—â–µ–Ω –∫—ç—à –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
  }
}
