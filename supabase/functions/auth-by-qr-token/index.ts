import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log('üöÄ auth-by-qr-token Edge Function called')
    console.log('üìã Request method:', req.method)
    console.log('üìã Request URL:', req.url)
    
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    
    if (!supabaseUrl || !supabaseServiceKey) {
      console.error('‚ùå Missing environment variables')
      throw new Error('Missing Supabase configuration')
    }
    
    const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    })

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ body (POST) –∏–ª–∏ URL path (GET)
    let token: string;
    
    if (req.method === 'POST') {
      const body = await req.json()
      token = body.token
    } else {
      // GET –∑–∞–ø—Ä–æ—Å - —Ç–æ–∫–µ–Ω –∏–∑ URL path
      const url = new URL(req.url)
      const pathParts = url.pathname.split('/')
      token = pathParts[pathParts.length - 1] // –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø—É—Ç–∏
    }
    
    if (!token || token === 'auth-by-qr-token') {
      console.error('‚ùå No token provided. URL:', req.url)
      throw new Error('Token is required')
    }

    console.log('üîç Looking up QR token:', token.substring(0, 8) + '...')

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω
    let qrToken: any = null;
    let tokenError: any = null;

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º RPC —Ñ—É–Ω–∫—Ü–∏—é
      const rpcResult = await supabaseAdmin
        .rpc('get_qr_token_user', { token_param: token })
      
      console.log('üîç RPC result:', rpcResult)
      
      if (rpcResult.data && rpcResult.data.length > 0) {
        qrToken = { user_id: rpcResult.data[0].user_id }
      } else {
        tokenError = rpcResult.error
      }
    } catch (e) {
      console.log('üîÑ RPC failed, trying direct query...')
      tokenError = e
    }

    // –ï—Å–ª–∏ RPC –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
    if (!qrToken) {
      console.log('üîÑ Trying direct query...')
      const directResult = await supabaseAdmin
        .from('user_qr_tokens')
        .select('user_id')
        .eq('token', token)
        .eq('is_active', true)
        .single()
      
      console.log('üîç Direct query result:', directResult)
      
      if (directResult.data) {
        qrToken = directResult.data
      } else {
        tokenError = directResult.error
      }
    }

    if (!qrToken || !qrToken.user_id) {
      console.error('‚ùå Invalid or expired token:', tokenError)
      throw new Error('Invalid or expired QR token')
    }

    console.log('‚úÖ Valid token found for user:', qrToken.user_id)

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: usersList, error: usersError } = await supabaseAdmin.auth.admin.listUsers()
    if (usersError) {
      console.error('‚ùå Error listing users:', usersError)
      throw new Error('Failed to list users')
    }

    const user = usersList.users.find(u => u.id === qrToken.user_id)
    if (!user) {
      throw new Error('User not found')
    }

    console.log('‚úÖ User found:', user.email)

    // –ù–û–í–´–ô –ü–û–î–•–û–î: –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ magic link
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ JSON –æ—Ç–≤–µ—Ç–µ, –∞ –Ω–µ —á–µ—Ä–µ–∑ redirect
    console.log('üîë Creating session for user...')
    
    const { data: sessionData, error: sessionError } = await supabaseAdmin.auth.admin.createSession({
      user_id: user.id,
      // –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Supabase)
      // session_not_after: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 –¥–Ω–µ–π
    })

    if (sessionError) {
      console.error('‚ùå Error creating session:', sessionError)
      throw new Error(`Failed to create session: ${sessionError.message}`)
    }

    if (!sessionData?.access_token || !sessionData?.refresh_token) {
      console.error('‚ùå No tokens in session data:', sessionData)
      throw new Error('Failed to generate session tokens')
    }

    console.log('‚úÖ Session created successfully')
    console.log('üîë Access token length:', sessionData.access_token.length)
    console.log('üîë Refresh token length:', sessionData.refresh_token.length)

    const baseAppUrl = Deno.env.get('PUBLIC_APP_URL') || 'http://51.250.94.103'

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –≤ JSON
    // Frontend —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∏—Ö –≤ localStorage/sessionStorage
    const response = {
      success: true,
      access_token: sessionData.access_token,
      refresh_token: sessionData.refresh_token,
      expires_in: sessionData.expires_in,
      expires_at: sessionData.expires_at,
      token_type: 'bearer',
      user: sessionData.user,
      // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º redirectUrl –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      redirectUrl: `${baseAppUrl}/`,
      needsActivation: false // –¢–æ–∫–µ–Ω—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
    };
    
    console.log('üì§ Returning response with tokens');
    
    return new Response(JSON.stringify(response), {
      status: 200,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    })

  } catch (error) {
    console.error('‚ùå Error in auth-by-qr-token:', error)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ JSON
    return new Response(JSON.stringify({
      success: false,
      error: error.message || 'Authentication failed'
    }), {
      status: 400,
      headers: {
        ...corsHeaders,
        'Content-Type': 'application/json'
      }
    })
  }
})
